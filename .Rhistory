inherit.aes = FALSE)
}
# Set axis
p <- p +
ggplot2::coord_cartesian(ylim = y_limits) +
# ggplot2::scale_y_continuous(limits = y_limits) +
ggplot2::scale_x_date(limits = x_limits,
breaks = x_breaks,
labels = scales::date_format(format = "%b-%d")) +
ggplot2::theme_minimal() +
ggplot2::theme(axis.title = ggplot2::element_blank(),
legend.position = "right",
legend.direction = "vertical",
axis.text.x = ggplot2::element_text(angle = 90))
# Plot doubling times
doubling_data <- create_doubling(data)
p <- p +
ggplot2::geom_line(aes(x = date,
y = value,
group = name,
col = name),
linetype = 2,
size = .8,
data = doubling_data,
inherit.aes = FALSE) +
ggplot2::scale_color_brewer("Doubling Rate", palette = "Set1", aesthetics = "colour")
# Show plot
p
library(corona)
sym("height")
!!sym("height")
debugonce(plot_country)
data_germany %>% plot_country()
data_germany %>% predict_growth() %>% plot_country()
library(corona)
data_germany %>% predict_growth() %>% plot_country()
library(corona)
data_germany %>% predict_growth() %>% plot_country()
country(data$country)
library(corona)
data_germany %>% plot_country()
data_germany %>% filter(country == "Germany") %>% plot_country()
data_germany
data_germany %>% filter(country == "Germany")
data_germany %>% filter(country == "Germany") %>% tail
data_germany %>% filter(country == "Germany")
plot_country
data_germany %>% filter(country == "Germany")
data_germany %>%
filter(country == "Germany") %>%
plot_country()
data_germany %>%
filter(country == "Germany")
data_germany %>%
filter(country == "Germany") %>%
plot_country()
debugonce(plot_country)
data_germany %>%
filter(country == "Germany") %>%
plot_country()
n_countries
library(corona)
# Predict the cases
data_germany %>% predict_growth()
data_germany %>%
filter(country == "Germany") %>%
plot_country()
library(corona)
data_germany %>%
filter(country == "Germany") %>%
plot_country()
library(corona)
# Plot data for a single data (Germany)
data_germany %>%
filter(country == "Germany") %>%
plot_country()
library(corona)
# Plot data for a single data (Germany)
data_germany %>%
filter(country == "Germany") %>%
plot_country()
library(corona)
# Plot data for a single data (Germany)
data_germany %>%
filter(country == "Germany") %>%
plot_country()
# Plot data for a single data (Germany)
data_germany %>%
filter(country == "Germany") %>%
plot_country(show_model = TRUE)
library(corona)
# Plot data for a single data (Germany)
data_germany %>%
filter(country == "Germany") %>%
plot_country(show_model = TRUE)
# Plot data for a single data (Germany)
data_germany %>%
filter(country == "Germany") %>%
plot_country(show_model = FALSE)
# Plot data for a single data (Germany)
data_germany %>%
filter(country == "Italy") %>%
plot_country(show_model = FALSE)
library(corona)
pred_in_col <- "predicted_cases" %in% colnames(data)
# Plot data for a single data (Germany)
data_germany %>%
filter(country == "Italy") %>%
plot_country(show_model = FALSE)
# Plot data for a single data (Germany)
data_germany %>%
filter(country == "Italy") %>%
plot_country(show_model = TRUE)
# Plot data for a single data (Germany)
data_germany %>%
filter(country == "Italy") %>%
predict_growth() %>%
plot_country(show_model = TRUE)
# prepare data with two countries
data_ger_ita <- data %>%
preprocess_corona_data(statistic = "infections",
countries = c("Germany", "Italy"),
n = 100)
data_ger_ita
# Import the corona
data <- read_corona()
library(corona)
library(dplyr)
# Import the corona
data <- read_corona()
data
# Prepare data
data_germany <- data %>%
preprocess_corona_data(statistic = "infections",
countries = "Germany",
n = 100)
# Predict the cases
data_germany %>% predict_growth()
# Plot data for a single data (Germany)
data_germany %>%
filter(country == "Italy") %>%
predict_growth() %>%
plot_country(show_model = TRUE)
data_germany %>%
filter(country == "Italy") %>%
predict_growth() %>%
plot_country(show_model = TRUE)
# Predict the cases
data_germany %>% predict_growth()
data_germany %>%
filter(country == "Italy") %>%
predict_growth() %>%
plot_country(show_model = TRUE)
# Plot data for a single data (Germany)
data_germany %>%
filter(country == "Italy") %>%
# predict_growth() %>%
plot_country(show_model = TRUE)
# Plot data for a single data (Germany)
data_germany %>%
# filter(country == "Italy") %>%
# predict_growth() %>%
plot_country(show_model = TRUE)
# Plot data for a single data (Germany)
data_germany %>%
filter(country == "Italy") %>%
# predict_growth() %>%
plot_country(show_model = TRUE)
data_germany %>%
filter(country == "Italy")
# Plot data for a single data (Germany)
data_germany <- data %>%
preprocess_corona_data(statistic = "infections",
countries = "Spain",
n = 100)
# Data pipeline
data %>%
preprocess_corona_data(statistic = "infections",
countries = "Spain",
n = 100) %>%
filter(country == "Italy") %>%
predict_growth() %>%
plot_country(show_model = TRUE)
data
# Data pipeline
data %>%
preprocess_corona_data(statistic = "infections",
countries = "Spain",
n = 100) %>%
predict_growth() %>%
plot_country(show_model = TRUE)
# Data pipeline
data %>%
preprocess_corona_data(statistic = "deaths",
countries = "Italy",
n = 100) %>%
predict_growth() %>%
plot_country(show_model = TRUE)
# Data pipeline
data %>%
preprocess_corona_data(statistic = "infections",
countries = "Spain",
n = 100) %>%
predict_growth() %>%
plot_country(show_model = TRUE)
# Data pipeline
data %>%
preprocess_corona_data(statistic = "infections",
countries = "Spain",
n = 100) %>%
predict_growth() %>%
plot_country(show_model = TRUE)
# Data pipeline
data %>%
preprocess_corona_data(statistic = "infections",
countries = "Spain",
n = 100) %>%
growths_model() %>%
plot_country(show_model = TRUE)
# Data pipeline
data %>%
preprocess_corona_data(statistic = "infections",
countries = "Spain",
n = 100) %>%
growth_model() %>%
plot_country(show_model = TRUE)
growth_model
# Data pipeline
data %>%
preprocess_corona_data(statistic = "infections",
countries = "Spain",
n = 100) %>%
predict_growth() %>%
plot_country(show_model = TRUE)
# Data pipeline
data %>%
preprocess_corona_data(statistic = "deaths",
countries = "Italy",
n = 100) %>%
predict_growth() %>%
plot_country(show_model = TRUE)
data %>%
preprocess_corona_data(statistic = "deaths",
countries = "Italy",
n = 10) %>%
predict_growth() %>%
plot_country(show_model = TRUE) +
ggtitle("Corona  Death Growth Curve in Italy")
data %>%
preprocess_corona_data(statistic = "deaths",
countries = "Italy",
n = 10) %>%
predict_growth() %>%
plot_country(show_model = TRUE)
# Data pipeline
data %>%
preprocess_corona_data(statistic = "deaths",
countries = "Italy",
n = 10) %>%
predict_growth() %>%
plot_country(show_model = TRUE) +
ggtitle("Corona  Death Growth Curve in Italy") +
xlab("sdkjafhö")
# Data pipeline
data %>%
preprocess_corona_data(statistic = "deaths",
countries = "Italy",
n = 10) %>%
predict_growth() %>%
plot_country(show_model = TRUE) +
ggplot2::ggtitle("Corona  Death Growth Curve in Italy") +
ggplot2::xlab("sdkjafhö")
# Data pipeline
data %>%
preprocess_corona_data(statistic = "deaths",
countries = "Italy",
n = 10) %>%
predict_growth() %>%
plot_country(show_model = TRUE) +
ggplot2::ggtitle("Corona  Death Growth Curve in Italy") +
ggplot2::labs(x = "sdkjafhö")
# Data pipeline
data %>%
preprocess_corona_data(statistic = "deaths",
countries = "Italy",
n = 10) %>%
predict_growth() %>%
plot_country(show_model = TRUE) +
ggplot2::ggtitle("Corona  Death Growth Curve in Italy")
# Data pipeline
data %>%
preprocess_corona_data(statistic = "deaths",
countries = "Italy",
n = 10) %>%
predict_growth() %>%
plot_country(show_model = TRUE) +
ggplot2::ggtitle("Corona  Death Growth Curve in Italy",
subtitle = "Starte date is the first day with > 10 deaths")
library(corona)
usethis::use_package("glue")
usethis::use_package("scales")
usethis::use_package("tibble")
df <- read_corona()
df %>%
dplyr::filter(country == "Germany")
df %>%
dplyr::filter(country == "Germany") %>%
dplyr::filter(infections > 100)
df %>%
dplyr::filter(country == "Germany") %>%
dplyr::filter(infections > 100)
df %>%
dplyr::filter(country == "Germany") %>%
dplyr::filter(infections > 100) %>%
lm_corona(data = df, number = "infections")
df %>%
dplyr::filter(country == "Germany") %>%
dplyr::filter(infections > 100) %>%
lm_corona()
library(corona)
df %>%
preprocess_corona_data(
countries = "Germany",
statistic = "infections",
n = 100
) %>%
lm_corona()
library(corona)
df %>%
preprocess_corona_data(
countries = "Germany",
statistic = "infections",
n = 100
)
df %>%
preprocess_corona_data(
countries = "Germany",
statistic = "infections",
n = 100
) %>%
lm_corona()
data
data %>%
preprocess_corona_data(statistic = "infections",
countries = "Spain",
n = 100)
library(corona)
df %>%
preprocess_corona_data(
countries = "Germany",
statistic = "infections",
n = 100
)
# Import the corona
data <- read_corona()
data
# Prepare data
data_germany <- data %>%
preprocess_corona_data(statistic = "infections",
countries = "Germany",
n = 100)
data_germany
# Predict the cases
data_germany %>% predict_growth()
df %>%
preprocess_corona_data(
countries = "Germany",
statistic = "infections",
n = 100
) %>%
lm_corona()
library(corona)
df %>%
preprocess_corona_data(
countries = "Germany",
statistic = "infections",
n = 100
) %>%
lm_corona()
library(corona)
df %>%
preprocess_corona_data(
countries = "Germany",
statistic = "infections",
n = 100
) %>%
lm_corona()
df %>%
preprocess_corona_data(
countries = "Germany",
statistic = "infections",
n = 100
)
df %>%
preprocess_corona_data(
countries = "Germany",
statistic = "infections",
n = 100
) %>%
lm_corona()
# Data pipeline
data %>%
preprocess_corona_data(statistic = "deaths",
countries = "Italy",
n = 10) %>%
predict_growth() %>%
plot_country(show_model = TRUE) +
ggplot2::ggtitle("Corona  Death Growth Curve in Italy",
subtitle = "Starte date is the first day with > 10 deaths")
library(corona)
df %>%
preprocess_corona_data(
countries = "Germany",
statistic = "infections",
n = 100
) %>%
lm_corona()
library(corona)
unlink('README_cache', recursive = TRUE)
df %>%
preprocess_corona_data(
countries = "Germany",
statistic = "infections",
n = 100
) %>%
lm_corona()
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
# Chunk 2: import-1
library(corona)
library(dplyr)
# Import the corona
data <- read_corona()
data
# Chunk 4: preprocess-corona-data
# Prepare data
data_germany <- data %>%
preprocess_corona_data(statistic = "infections",
countries = "Germany",
n = 100)
# Chunk 5: predict-model-case-numbers
# Predict the cases
data_germany %>% predict_growth()
# Chunk 6
# Data pipeline
data %>%
preprocess_corona_data(statistic = "infections",
countries = "Spain",
n = 100) %>%
predict_growth() %>%
plot_country(show_model = TRUE)
# Chunk 7
# Data pipeline
data %>%
preprocess_corona_data(statistic = "deaths",
countries = "Italy",
n = 10) %>%
predict_growth() %>%
plot_country(show_model = TRUE) +
ggplot2::ggtitle("Corona  Death Growth Curve in Italy",
subtitle = "Starte date is the first day with > 10 deaths")
# Chunk 8
df %>%
preprocess_corona_data(
countries = "Germany",
statistic = "infections",
n = 100
) %>%
lm_corona()
df %>%
preprocess_corona_data(
countries = "Germany",
statistic = "infections",
n = 100
) %>%
lm_corona()
library(corona)
df %>%
preprocess_corona_data(
countries = "Germany",
statistic = "infections",
n = 100
) %>%
lm_corona()
debugonce(lm_corona)
df %>%
preprocess_corona_data(
countries = "Germany",
statistic = "infections",
n = 100
) %>%
lm_corona()
df %>%
preprocess_corona_data(
countries = "Germany",
statistic = "infections",
n = 100
)
debugonce(lm_corona)
data %>%
preprocess_corona_data(
countries = "Germany",
statistic = "infections",
n = 100
) %>%
lm_corona()
library(corona)
